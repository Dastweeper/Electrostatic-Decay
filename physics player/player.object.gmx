<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
hsp = 0;
vsp = 0;
grav = 0.5;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect Gamepad
slot = 0;
for (i = 0; i &lt; gamepad_get_device_count(); i++)
    {
        if(gamepad_is_connected(i) == true)
        {
               slot = i;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_is_connected(slot) == true)
{
    key_left = gamepad_button_check(slot, gp_padl);
    key_right = gamepad_button_check(slot, gp_padr);
    key_jump = gamepad_button_check(slot, gp_face1);
    key_down = gamepad_button_check(slot, gp_padd);
}
else
{
    key_left = keyboard_check(vk_left);
    key_right = keyboard_check(vk_right);
    key_jump = keyboard_check(vk_space);
    key_down = keyboard_check(vk_down);
}

//checks if each key is pressed
if(key_left)
{
    hsp = -5;
    image_xscale = -1;
}
if(key_right)
{
    hsp = 5;
    image_xscale = 1;
}
//if both direction keys are pressed the there is no movement
if(key_left &amp;&amp; key_right) or (!key_left &amp;&amp; !key_right)
{
    hsp = 0;
}



//gradually adds gravity to jumps
vsp += grav;

// stops horizontal movement at collision of boundary
if (collision_rectangle(x-19+hsp, y+30 ,x+19+hsp, y-32, par_boundary, true, false) != noone)
{
    while(collision_rectangle(x-20, y+30 ,x+20, y-32, par_boundary, true, false) == noone) x+=sign(hsp);
    hsp = 0;
}

//stops movement as player jumps upward towards a boundary
if (collision_line(x-19, y-32+vsp, x+19, y-32+vsp, par_boundary,true, false) != noone)
{
    while((collision_line(x-19, y-33, x+19, y-33, par_boundary,true, false)) == noone)
    {
        y+=sign(vsp);
    }
    vsp = 0;
}

if(sign(vsp)&gt;=0){
        if(collision_rectangle(x-23, y+31+vsp, x+19, y+25, par_platform, true, false) != noone){
            while(collision_line(x-23, y+31, x+19, y+31, par_platform, true, false) == noone){
                y+=sign(vsp);
                
            }
            vsp=0;
        }
}
collide = collision_line(x-23, y+31,x+19,y+31, par_platform, true, false);
if(collision_line(x-23, y+31,x+19,y+31, par_platform, true, false) == collide &amp;&amp; collision_line(x-23, y+30,x-23,y+28, par_platform, true, false) != collide &amp;&amp; collision_line(x+19, y+30,x+19,y+28, par_platform, true, false) != collide){
    if(key_jump){
        if(key_down){
            y+=2;
        }
        else{
            vsp = -10;
        }
    }
}

if(sign(vsp)&gt;=0){
        if(collision_rectangle(x-23, y+31+vsp, x+19, y+25, par_boundary, true, false) != noone){
            while(collision_line(x-23, y+31, x+19, y+31, par_boundary, true, false) == noone){
                y+=sign(vsp);
                
            }
            vsp=0;
        }
}
boundcollide = collision_line(x-23, y+31,x+19,y+31, par_boundary, true, false);
if(collision_line(x-23, y+31,x+19,y+31, par_boundary, true, false) == boundcollide &amp;&amp; collision_line(x-23, y+30,x-23,y+28, par_boundary, true, false) != boundcollide &amp;&amp; collision_line(x+19, y+30,x+19,y+28, par_boundary, true, false) != boundcollide){
    if(key_jump){
        vsp = -10;
    }
}
/*if(sign(vsp)&gt;=0){
    if(collision_rectangle(x-23, y+31, x+19, y-30, par_platform, true, false) == noone){
        if(collision_line(x-23, y+31+vsp, x+19, y+31+vsp, par_platform,true, false) != noone) &amp;&amp; (collision_line(x+19, y+28 ,x+19, y+30, par_platform, true, false) == noone) &amp;&amp;(collision_line(x-23, y+28 ,x-23, y+30, par_platform, true, false) == noone){
            while(collision_line(x-19, y+31, x+19, y+31, par_platform,true, false) == noone){
                y+=sign(vsp);
            }
            vsp = 0;
        }
    }
}

collide = collision_line(x-23, y-30,x+19,y-30, par_platform, true, false);
if(collision_line(x-23, y-30,x+19,y-30, par_platform, true, false) == collide &amp;&amp; collision_line(x-23, y-29,x-23,y-28, par_platform, true, false) != collide &amp;&amp; collision_line(x+19, y-29,x+19,y-28, par_platform, true, false) != collide){
    if(key_jump){
        if(key_down){
            y+=2;
        }
        else{
            vsp = -10;
        }
    }
}

boundcollide = collision_line(x-23, y+31,x+19,y+31, par_boundary, true, false);
if(collision_line(x-23, y+31,x+19,y+31, par_boundary, true, false) == boundcollide &amp;&amp; collision_line(x-23, y+30,x-23,y+28, par_boundary, true, false) != boundcollide &amp;&amp; collision_line(x+19, y+30,x+19,y+28, par_boundary, true, false) != boundcollide){
    if(key_jump){
            vsp = -10;
    }
}
/*stops vertical speed if bottom of player collides with a boundary
if(collision_line(x-19, y+32+vsp, x+19, y+32+vsp, par_boundary,true, false) != noone)
{
    while(collision_line(x-19, y+33, x+19, y+33, par_boundary,true, false) == noone)
    {
        y+=sign(vsp);
    }
    vsp = 0;
    if(key_jump)
    {
        vsp = -10;
    }
}

//stops vertical speed if bottom of player collides with a platform
if(collision_line(x-19, y+32+vsp, x+19, y+32+vsp, par_platform,true, false) != noone) &amp;&amp; (collision_line(x+19+hsp, y+31 ,x+19+hsp, y+31, par_platform, true, false) == noone) &amp;&amp;(collision_line(x-19+hsp, y+31 ,x-19+hsp, y-+31, par_platform, true, false) == noone)
{
    while(collision_line(x-19, y+32, x+19, y+32, par_platform,true, false) == noone)
    {
        y+=sign(vsp);
    }
    vsp = 0;
    if(key_jump)
    {
        if(key_down)
        {
            y+=2;
        }
        else
        {
            vsp = -10;
        }
    }
}*/



//commits movement
x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,16</point>
    <point>64,16</point>
    <point>64,64</point>
    <point>32,64</point>
  </PhysicsShapePoints>
</object>
