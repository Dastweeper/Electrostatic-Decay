<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Gravity
grav = .1;
//Initial vertical speed (for an arc)
vsp = -.3;
//Arraow horizontal speed
hsp = 12 * player.image_xscale;
//Is the arrow touching the ground?
grounded = false;
count = 0;
//Make the arrow face the right direction
image_xscale = player.image_xscale;
//will creat a 1 frame delay before being destroyed
//Inside the step code
destroy = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//add gravity to the vertical speed
vsp += grav;
//If about to touch the ground
if place_meeting(x, y+vsp, obj_Static_Parent)
{
    //Move next to the ground and stop
    while(!place_meeting(x, y+1, obj_Static_Parent)) y+=1;
    vsp = 0;
    grounded = true;
}
//If a wall is hit
else if place_meeting(x+hsp, y, obj_Static_Parent)
{
    //Move next to the wall and stop
    while(!place_meeting(x+sign(1), y, obj_Static_Parent)) x+=sign(hsp);
    vsp = 0;
    grounded = true;
}
else
{
    grounded = false;
}
//If destroy is called, destroy the object
//This delays death 1 frame and move the arrow to the
//enemy instead of 12 pixels away and allows the enemy
//to detect the collision
if(destroy){
    instance_destroy();
}
//move
y += vsp;
x += hsp;
//If an enemy is hit
if(place_meeting(x+hsp, y, obj_enemyTest)){
    //move next to the enemy
    while(!place_meeting(x+image_xscale, y, obj_enemyTest)){
        x += image_xscale;
    }
    //call destroy
    destroy = true;
}
//If on the ground
if(grounded = 1){
    //Destroy the arrow after 60 frames
    count ++;
    if(count = 60){
        instance_destroy();
    }
    //If the arrows has horizontal speed,
    //Slow it down to make a sliding stop
    if(hsp &gt; 0){
        hsp -= 4;
    }
    if(hsp &lt; 0){
        hsp = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,-1</point>
    <point>20,-1</point>
    <point>20,7</point>
    <point>0,7</point>
  </PhysicsShapePoints>
</object>
